@page "/weather"
@inject HttpClient Http
@using System.Net.Http.Json
@using System;
@using System.Text.Json.Serialization

<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (weatherInfo == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Latitude</th>
                <th>Longitude</th>
                <th>Temp. (K)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>@DateTimeOffset.FromUnixTimeSeconds(weatherInfo.Current.Dt).DateTime.ToShortDateString()</td>
                <td>@weatherInfo.Lat</td>
                <td>@weatherInfo.Lon</td>
                <td>@weatherInfo.Current.Temp</td>
                <td>@(weatherInfo.Daily.Length > 0 ? weatherInfo.Daily[0].Summary : weatherInfo.Current.Weather[0].Description)</td>
            </tr>
        </tbody>
    </table>
}

@code {
    private WeatherInfo? weatherInfo;

    // Predefined latitude and longitude values
    private double latitude = 33.44;  // Example latitude
    private double longitude = -94.04;  // Example longitude

    protected override async Task OnInitializedAsync()
    {
        // Pass latitude and longitude as query parameters
        var url = $"https://localhost:5248/api/weather/forecast?lat={latitude}&lon={longitude}";

        weatherInfo = await Http.GetFromJsonAsync<WeatherInfo>(url);

        if (weatherInfo != null)
        {
            // Populate the latitude and longitude fields in weatherInfo
            weatherInfo.Lat = latitude;
            weatherInfo.Lon = longitude;
        }
    }

    public class WeatherInfo
    {
        [JsonPropertyName("lat")]
        public double Lat { get; set; }

        [JsonPropertyName("lon")]
        public double Lon { get; set; }

        [JsonPropertyName("current")]
        public CurrentWeather Current { get; set; }

        [JsonPropertyName("daily")]
        public DailyWeather[] Daily { get; set; }
    }

    public class CurrentWeather
    {
        [JsonPropertyName("temp")]
        public double Temp { get; set; }

        [JsonPropertyName("dt")]
        public long Dt { get; set; }

        [JsonPropertyName("weather")]
        public WeatherCondition[] Weather { get; set; }
    }

    public class DailyWeather
    {
        [JsonPropertyName("summary")]
        public string Summary { get; set; }
    }

    public class WeatherCondition
    {
        [JsonPropertyName("description")]
        public string Description { get; set; }
    }
}
